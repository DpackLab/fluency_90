name: CI
on: [push, pull_request]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security:
    name: Security (SCA + SAST + Secrets)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install linters/scanners
        run: |
          python -m pip install --upgrade pip
          pip install ruff bandit
      - name: Ruff (lint)
        run: ruff check .
      - name: Bandit (SAST)
        run: bandit -r -q app -x venv,tests,alembic/versions
      - name: Gitleaks (secrets)
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --redact --source=.

  tests:
    name: Tests (Postgres + Alembic + PyTest)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    # Variables necesarias para tu app/tests
    env:
      PYTHONPATH: ${{ github.workspace }}
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fluency90_test
      SECRET_KEY: test_secret_please_change
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      ALLOW_ORIGINS: http://localhost:5173,https://tu-front.com

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fluency90_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps (runtime + test)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest psycopg2-binary alembic

      - name: Install Postgres client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      # (Opcional) Si tu cÃ³digo depende estrictamente de .env
      - name: Create .env for CI
        run: |
          cat > .env <<'EOF'
          DATABASE_URL=${DATABASE_URL}
          SECRET_KEY=${SECRET_KEY}
          ALGORITHM=${ALGORITHM}
          ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
          ALLOW_ORIGINS=${ALLOW_ORIGINS}
          EOF

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 1
          done
          psql -h localhost -p 5432 -U postgres -c "SELECT 1;" || exit 1

      - name: Run Alembic migrations
        run: alembic upgrade head

      - name: Run tests
        run: pytest -q
